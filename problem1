const express = require('express');
const axios = require('axios');

const app = express();
const PORT = 9876;
const WINDOW_SIZE = 10;
const API_URLS = {
    p: 'http://20.244.56.144/test/primes',
    f: 'http://20.244.56.144/test/fibo',
    e: 'http://20.244.56.144/test/even',
    r: 'http://20.244.56.144/test/rand'
};

const numbersStore = {
    p: [],
    f: [],
    e: [],
    r: []
};

const fetchNumbers = async (url) => {
    try {
        const response = await axios.get(url, { timeout: 500 });
        if (response.status === 200) {
            return response.data.numbers || [];
        }
    } catch (error) {
        return [];
    }
};

const calculateAverage = (numbers) => {
    if (numbers.length === 0) return 0.0;
    const sum = numbers.reduce((acc, num) => acc + num, 0);
    return sum / numbers.length;
};

app.get('/numbers/:typeId', async (req, res) => {
    const typeId = req.params.typeId;
    if (!API_URLS[typeId]) {
        return res.status(400).json({ error: 'Invalid type ID' });
    }

    const prevState = [...numbersStore[typeId]];
    const newNumbers = await fetchNumbers(API_URLS[typeId]);

    // Update the store with unique values
    const updatedNumbers = Array.from(new Set([...prevState, ...newNumbers]));

    // Ensure the numbers list does not exceed the window size
    if (updatedNumbers.length > WINDOW_SIZE) {
        updatedNumbers.splice(0, updatedNumbers.length - WINDOW_SIZE);
    }

    // Update the store with the new state
    numbersStore[typeId] = updatedNumbers;

    // Calculate average
    const avg = calculateAverage(numbersStore[typeId]);

    const response = {
        windowPrevState: prevState,
        windowCurrState: numbersStore[typeId],
        numbers: newNumbers,
        avg: parseFloat(avg.toFixed(2))
    };
    res.json(response);
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
